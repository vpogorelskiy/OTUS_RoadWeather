//
// ModelResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ModelResponse: Codable, JSONEncodable, Hashable {

    public var lat: Double
    public var lon: Double
    public var timezone: String?
    public var timezoneOffset: Int?
    public var current: CurrentInfo?
    public var minutely: [MinutelyInfo]?
    public var hourly: [HourlyInfo]?
    public var daily: [DailyInfo]?
    public var alerts: [Alerts]?

    public init(lat: Double, lon: Double, timezone: String? = nil, timezoneOffset: Int? = nil, current: CurrentInfo? = nil, minutely: [MinutelyInfo]? = nil, hourly: [HourlyInfo]? = nil, daily: [DailyInfo]? = nil, alerts: [Alerts]? = nil) {
        self.lat = lat
        self.lon = lon
        self.timezone = timezone
        self.timezoneOffset = timezoneOffset
        self.current = current
        self.minutely = minutely
        self.hourly = hourly
        self.daily = daily
        self.alerts = alerts
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case lat
        case lon
        case timezone
        case timezoneOffset = "timezone_offset"
        case current
        case minutely
        case hourly
        case daily
        case alerts
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(lat, forKey: .lat)
        try container.encode(lon, forKey: .lon)
        try container.encodeIfPresent(timezone, forKey: .timezone)
        try container.encodeIfPresent(timezoneOffset, forKey: .timezoneOffset)
        try container.encodeIfPresent(current, forKey: .current)
        try container.encodeIfPresent(minutely, forKey: .minutely)
        try container.encodeIfPresent(hourly, forKey: .hourly)
        try container.encodeIfPresent(daily, forKey: .daily)
        try container.encodeIfPresent(alerts, forKey: .alerts)
    }
}

